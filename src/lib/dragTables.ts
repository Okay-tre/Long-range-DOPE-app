/*
  Provide full G1 and G7 "retardation" tables or equivalent drag functions as arrays.
  Each entry is { v: number; f: number } where:
    v = speed in m/s
    f = reference drag function value (dimensionless) for the chosen standard (G1 or G7)

  NOTE: The solver expects functions fG1(v) and fG7(v) that linearly interpolate.
*/

export type DragPoint = { v: number; f: number };
export type DragTable = DragPoint[];

// Full G1 drag coefficient table (standard flat-base projectile)
export const G1_TABLE: DragTable = [
  { v: 0, f: 0.2629 }, { v: 51.85, f: 0.2558 }, { v: 103.7, f: 0.2487 }, { v: 155.55, f: 0.2413 }, { v: 207.4, f: 0.2344 },
  { v: 259.25, f: 0.2278 }, { v: 311.1, f: 0.2214 }, { v: 362.95, f: 0.2155 }, { v: 414.8, f: 0.2104 }, { v: 466.65, f: 0.2061 },
  { v: 518.5, f: 0.2032 }, { v: 570.35, f: 0.2020 }, { v: 622.2, f: 0.2034 }, { v: 674.05, f: 0.2165 }, { v: 725.9, f: 0.2230 },
  { v: 777.75, f: 0.2313 }, { v: 829.6, f: 0.2417 }, { v: 881.45, f: 0.2546 }, { v: 933.3, f: 0.2706 }, { v: 985.15, f: 0.2901 },
  { v: 1037, f: 0.3136 }, { v: 1088.85, f: 0.3415 }, { v: 1140.7, f: 0.3734 }, { v: 1192.55, f: 0.4084 }, { v: 1244.4, f: 0.4448 },
  { v: 1296.25, f: 0.4805 }, { v: 1348.1, f: 0.5136 }, { v: 1399.95, f: 0.5427 }, { v: 1451.8, f: 0.5677 }, { v: 1503.65, f: 0.5883 },
  { v: 1555.5, f: 0.6053 }, { v: 1607.35, f: 0.6191 }, { v: 1659.2, f: 0.6393 }, { v: 1711.05, f: 0.6518 }, { v: 1762.9, f: 0.6589 },
  { v: 1814.75, f: 0.6621 }, { v: 1866.6, f: 0.6625 }, { v: 1918.45, f: 0.6607 }, { v: 1970.3, f: 0.6573 }, { v: 2022.15, f: 0.6528 },
  { v: 2074, f: 0.6474 }, { v: 2125.85, f: 0.6413 }, { v: 2177.7, f: 0.6347 }, { v: 2229.55, f: 0.6280 }, { v: 2281.4, f: 0.6210 },
  { v: 2333.25, f: 0.6141 }, { v: 2385.1, f: 0.6072 }, { v: 2436.95, f: 0.6003 }, { v: 2488.8, f: 0.5934 }, { v: 2540.65, f: 0.5867 },
  { v: 2592.5, f: 0.5804 }, { v: 2644.35, f: 0.5743 }, { v: 2696.2, f: 0.5685 }, { v: 2748.05, f: 0.5630 }, { v: 2799.9, f: 0.5577 },
  { v: 2851.75, f: 0.5527 }, { v: 2903.6, f: 0.5481 }, { v: 2955.45, f: 0.5438 }, { v: 3007.3, f: 0.5397 }, { v: 3059.15, f: 0.5325 },
  { v: 3111, f: 0.5264 }, { v: 3214.7, f: 0.5155 }, { v: 3318.4, f: 0.5059 }, { v: 3422.1, f: 0.4967 }, { v: 3525.8, f: 0.4888 },
  { v: 3629.5, f: 0.4806 }, { v: 3733.2, f: 0.4725 }, { v: 3836.9, f: 0.4654 }, { v: 3940.6, f: 0.4588 }, { v: 4044.3, f: 0.4533 },
  { v: 4148, f: 0.4497 }, { v: 4355.4, f: 0.4442 }, { v: 4562.8, f: 0.4402 }, { v: 4770.2, f: 0.4376 }, { v: 4977.6, f: 0.4362 },
  { v: 5185, f: 0.4359 }, { v: 5392.4, f: 0.4368 }, { v: 5599.8, f: 0.4388 }, { v: 5807.2, f: 0.4420 }, { v: 6014.6, f: 0.4464 }
];

// Full G7 drag coefficient table (boat-tail match projectiles)
export const G7_TABLE: DragTable = [
  { v: 0, f: 0.1198 }, { v: 51.85, f: 0.1197 }, { v: 103.7, f: 0.1196 }, { v: 155.55, f: 0.1194 }, { v: 207.4, f: 0.1193 },
  { v: 259.25, f: 0.1194 }, { v: 311.1, f: 0.1194 }, { v: 362.95, f: 0.1194 }, { v: 414.8, f: 0.1193 }, { v: 466.65, f: 0.1193 },
  { v: 518.5, f: 0.1194 }, { v: 570.35, f: 0.1193 }, { v: 622.2, f: 0.1196 }, { v: 674.05, f: 0.1201 }, { v: 725.9, f: 0.1209 },
  { v: 777.75, f: 0.1222 }, { v: 829.6, f: 0.1238 }, { v: 881.45, f: 0.1257 }, { v: 933.3, f: 0.1281 }, { v: 985.15, f: 0.1312 },
  { v: 1037, f: 0.1330 }, { v: 1088.85, f: 0.1349 }, { v: 1140.7, f: 0.1369 }, { v: 1192.55, f: 0.1388 }, { v: 1244.4, f: 0.1408 },
  { v: 1296.25, f: 0.1428 }, { v: 1348.1, f: 0.1447 }, { v: 1399.95, f: 0.1466 }, { v: 1451.8, f: 0.1484 }, { v: 1503.65, f: 0.1502 },
  { v: 1555.5, f: 0.1519 }, { v: 1607.35, f: 0.1535 }, { v: 1659.2, f: 0.1551 }, { v: 1711.05, f: 0.1566 }, { v: 1762.9, f: 0.1580 },
  { v: 1814.75, f: 0.1594 }, { v: 1866.6, f: 0.1607 }, { v: 1918.45, f: 0.1619 }, { v: 1970.3, f: 0.1630 }, { v: 2022.15, f: 0.1640 },
  { v: 2074, f: 0.1650 }, { v: 2125.85, f: 0.1659 }, { v: 2177.7, f: 0.1667 }, { v: 2229.55, f: 0.1675 }, { v: 2281.4, f: 0.1682 },
  { v: 2333.25, f: 0.1688 }, { v: 2385.1, f: 0.1694 }, { v: 2436.95, f: 0.1700 }, { v: 2488.8, f: 0.1705 }, { v: 2540.65, f: 0.1710 },
  { v: 2592.5, f: 0.1714 }, { v: 2644.35, f: 0.1718 }, { v: 2696.2, f: 0.1722 }, { v: 2748.05, f: 0.1725 }, { v: 2799.9, f: 0.1728 },
  { v: 2851.75, f: 0.1731 }, { v: 2903.6, f: 0.1733 }, { v: 2955.45, f: 0.1735 }, { v: 3007.3, f: 0.1737 }, { v: 3059.15, f: 0.1738 },
  { v: 3111, f: 0.1739 }, { v: 3214.7, f: 0.1740 }, { v: 3318.4, f: 0.1740 }, { v: 3422.1, f: 0.1740 }, { v: 3525.8, f: 0.1738 },
  { v: 3629.5, f: 0.1735 }, { v: 3733.2, f: 0.1732 }, { v: 3836.9, f: 0.1728 }, { v: 3940.6, f: 0.1724 }, { v: 4044.3, f: 0.1719 },
  { v: 4148, f: 0.1714 }, { v: 4355.4, f: 0.1704 }, { v: 4562.8, f: 0.1693 }, { v: 4770.2, f: 0.1681 }, { v: 4977.6, f: 0.1669 },
  { v: 5185, f: 0.1657 }, { v: 5392.4, f: 0.1644 }, { v: 5599.8, f: 0.1632 }, { v: 5807.2, f: 0.1620 }, { v: 6014.6, f: 0.1608 }
];

function interp(table: DragTable, v: number): number {
  if (v <= table[0].v) return table[0].f;
  const last = table[table.length - 1];
  if (v >= last.v) return last.f;
  for (let i = 1; i < table.length; i++) {
    const a = table[i - 1], b = table[i];
    if (v >= a.v && v <= b.v) {
      const t = (v - a.v) / (b.v - a.v);
      return a.f * (1 - t) + b.f * t;
    }
  }
  return last.f;
}

export const fG1 = (v: number) => interp(G1_TABLE, v);
export const fG7 = (v: number) => interp(G7_TABLE, v);
